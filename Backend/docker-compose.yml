version: '3'
services:
  user-mysql:
    container_name: "user-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: userDB
    volumes:
      - ./docker-sql/user/:/docker-entrypoint-initdb.d/
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  product-mysql:
    container_name: "product-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13307:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: productDB
    volumes:
      - ./docker-sql/product/:/docker-entrypoint-initdb.d/
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  review-mysql:
    container_name: "review-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13308:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: reviewDB
    volumes:
      - ./docker-sql/review/:/docker-entrypoint-initdb.d/
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  photo-mysql:
    container_name: "photo-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13309:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: photoDB
    volumes:
      - ./docker-sql/photo/:/docker-entrypoint-initdb.d/
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  billing-mysql:
    container_name: "billing-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13310:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: billingDB
    volumes:
      - ./docker-sql/billing/:/docker-entrypoint-initdb.d/
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
  es-setup:
    container_name: "es-setup"
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    volumes:
      - certs-volume:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elastic-search\n"\
          "    dns:\n"\
          "      - elastic-search\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elastic-search:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:changeme" -H "Content-Type: application/json" https://elastic-search:9200/_security/user/kibana_system/_password -d "{\"password\":\"kibana_system_password\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elastic-search/elastic-search.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elastic-search:
    depends_on:
      es-setup:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    container_name: "elastic-search"
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - node.name=elastic-search
      - cluster.initial_master_nodes=elastic-search
      - ELASTIC_PASSWORD=changeme
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elastic-search/elastic-search.key
      - xpack.security.http.ssl.certificate=certs/elastic-search/elastic-search.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elastic-search/elastic-search.key
      - xpack.security.transport.ssl.certificate=certs/elastic-search/elastic-search.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - certs-volume:/usr/share/elasticsearch/config/certs

  mongo-cart-db:
    image: mongo:5.0.16
    container_name: mongo-cart-db
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-cart-volume:/data/db
    environment:
      - MONGO_INITDB_DATABASE=cart

  mongo-client-temp:
    image: mongo:5.0.16
    container_name: mongo-client-temp
    links:
      - mongo-cart-db:mongo
    command: mongo --host mongo --eval  "db.getSiblingDB('cart').createUser({user:'manager', pwd:'1234', roles:[{role:'readWrite',db:'cart'}]});"
    depends_on:
      - mongo-cart-db
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.44.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana
    image: grafana/grafana:10.0.1
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0
    container_name: logstash
    user: "0"
    ports:
      - 15000:5000
      - 9600:9600
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - certs-volume:/usr/share/logstash/config/certs
    depends_on:
      es-setup:
        condition: service_completed_successfully

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elastic-search:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana_system_password
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    volumes:
      - certs-volume:/usr/share/kibana/config/certs
    depends_on:
      elastic-search:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  mongo-cart-volume:
    driver: local
  certs-volume:
    driver: local
