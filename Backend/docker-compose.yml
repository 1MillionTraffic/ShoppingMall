version: '3'
services:
  #  api-server:
  #    container_name: api-server
  #    restart: always
  #    build:
  #      context: ./api
  #      dockerfile: Dockerfile
  #    ports:
  #      - "8081:8080"
  #    depends_on:
  #      - user-mysql
  #      - product-mysql

  user-mysql:
    container_name: "user-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13307:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: userDB
    volumes:
      - ./userInit.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  product-mysql:
    container_name: "product-mysql" # spring 설정에 database-url을 해당 container 이름으로 해야한다
    image: mysql:8.0
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: productDB
    volumes:
      - ./productInit.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  mongo-cart-db:
    image: mongo:5.0.16
    container_name: mongo-cart-db
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-cart-volume:/data/db
    environment:
      - MONGO_INITDB_DATABASE=cart

  mongo-client-temp:
    image: mongo:5.0.16
    container_name: mongo-client-temp
    links:
      - mongo-cart-db:mongo
    command: mongo --host mongo --eval  "db.getSiblingDB('cart').createUser({user:'manager', pwd:'1234', roles:[{role:'readWrite',db:'cart'}]});"
    depends_on:
      - mongo-cart-db
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  mongo-cart-volume:
    driver: local
